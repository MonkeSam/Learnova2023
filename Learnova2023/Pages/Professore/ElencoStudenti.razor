@page "/Professore/ElencoStudenti/{classePassata}"
@using MudBlazor
@using Shared.Classes
@inject HttpClient Http
@inject StatoApp StatoApp
@inject ISnackbar Snackbar
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudTable Items="@Studenti" T="StudenteAdatto" Hover="true" Breakpoint="Breakpoint.Sm">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Elenco Studenti</MudText>
		<MudSpacer />
	</ToolBarContent>
	<ColGroup>
		<col style="width:200px;" />
		<col style="width:200px;" />
		<col style="width:200px;" />
		<col style="width:30px;"/>
		<col style="width:30px;"/>
		<col style="width:30px;"/>
	</ColGroup>
	<HeaderContent>
		<MudTh>Nome</MudTh>
		<MudTh>Cognome</MudTh>
		<MudTh>Data di Nascita</MudTh>
		<MudTh></MudTh>
		<MudTh></MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Nome">@context.StudenteReal.Nome</MudTd>
		<MudTd DataLabel="Cognome">@context.StudenteReal.Cognome</MudTd>
		<MudTd DataLabel="Data di nascita">@context.StudenteReal.DataDiNascita.ToShortDateString()</MudTd>
		<MudTd>
			<MudTooltip Text="Dettagli Note">
				<MudFab Icon="@Icons.Material.Filled.EditNote" Color="Color.Tertiary" OnClick="@(() => ShowBtnPress(context.NumeroRegistro))">@((context.ShowDetails == true) ? "Hide" : "Show")</MudFab>
			</MudTooltip>
		</MudTd>
		<MudTd>
			<MudTooltip Text="Voti">
				<MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />
			</MudTooltip>
		</MudTd>
		<MudTd>
			<MudTooltip Text="Assenze">
				<MudFab Icon="@Icons.Material.Filled.AccessibleForward" Color="Color.Secondary" />
			</MudTooltip>
		</MudTd>
	</RowTemplate>
	<ChildRowContent>
		@if (context.ShowDetails)
				{
  <MudTr>
   <td colspan="4">
	<MudCard Elevation="0">
	 <MudCardHeader>
	  <CardHeaderContent>
	   <MudText Typo="Typo.body1">Note di <strong>@context.StudenteReal.Nome</strong></MudText>
	  </CardHeaderContent>
	 </MudCardHeader>
	 <MudCardContent Class="pa-0">
	  <MudTable Items="@NoteStudente" Context="NoteStudente" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
	   <ColGroup>
		<col />
		<col />
		<col style="width:200px;" />
	   </ColGroup>
	   <HeaderContent>
		<MudTh>Data</MudTh>
		<MudTh>Professore</MudTh>
		<MudTh>Descrizione</MudTh>
	   </HeaderContent>
	   <RowTemplate>
		<MudTd DataLabel="Data">@NoteStudente.Date.ToShortDateString()</MudTd>
		<MudTd DataLabel="Professore">@NoteStudente.Professore.ToString()</MudTd>
		<MudTd DataLabel="Descrizione">@NoteStudente.Descrizione</MudTd>
	   </RowTemplate>
	  </MudTable>
	 </MudCardContent>
	</MudCard>
   </td>
  </MudTr>
		}
	</ChildRowContent>
</MudTable>
@code
{
	[Parameter]
	public string classePassata { get; set; }

	private static IEnumerable<StudenteAdatto> Studenti { get; set; }
	private static IEnumerable<Nota> NoteStudente { get; set; }
	protected override void OnInitialized()
	{
		FillPeople();
	}
	public class StudenteAdatto
	{
		public bool ShowDetails { get; set; }
		public int NumeroRegistro { get; set; }
		public Studente StudenteReal { get; set; }
	}
	private async Task FillPeople()
	{
		IList<StudenteAdatto> studenti = new List<StudenteAdatto>();
		IList<Studente> ottieniStud = new List<Studente>();
		//ottieniStud = await Http.GetFromJsonAsync<List<Studente>>($"/api/Studente/GetStudenti?idClasse={classePassata}&sk={StatoApp.SessionString}");
		//int iHelp = 1;
		//foreach(Studente x in ottieniStud)
		//{
		//	studenti.Add(new StudenteAdatto{ShowDetails = false,NumeroRegistro=iHelp,StudenteReal = x});
		//	iHelp++;
		//}
		studenti.Add(new StudenteAdatto { ShowDetails = false, NumeroRegistro = 1, StudenteReal = new Studente(1, "Cristian", "Di Donato", "krwstyan", new DateTime(2004, 4, 30, 0, 0, 0), 1) });
		studenti.Add(new StudenteAdatto { ShowDetails = false, NumeroRegistro = 2, StudenteReal = new Studente(2, "Ludovico", "Spitalers", "spwispw", new DateTime(2004, 12, 17, 0, 0, 0), 1) });
		Studenti = studenti;
	}

	private void ShowBtnPress(int nr)
	{
		StudenteAdatto tmpStud = Studenti.First(f => f.NumeroRegistro == nr);
		tmpStud.ShowDetails = !tmpStud.ShowDetails;
		NoteStudente = OttieniNoteStud(tmpStud.StudenteReal.Id);
	}
	//Fatto così per avere valori a runtime
	public List<Nota> note = new List<Nota>();
	private List<Nota> OttieniNoteStud(int idStud)
	{
		note = new List<Nota>();
		RiempiNote(idStud);
		return note;
	}
	private async Task RiempiNote(int idStud)
	{
		//note = await Http.GetFromJsonAsync<List<Nota>>($"/api/Note/GetStudenti?idStudente={idStud}&sk={StatoApp.SessionString}");
		if(idStud == 2){
			note.Add(new Nota(new DateTime(2023, 5, 2, 8, 30, 0), new Professore("Maurizio", "Sintuzzi"), "Sei Jotaro e puzzi"));
			note.Add(new Nota(new DateTime(2023, 5, 15, 8, 30, 0), new Professore("Giorgio", "Salutini"), "Non mi hai aiutato"));
		}
	}
}