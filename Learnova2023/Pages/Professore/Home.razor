@page "/Professore/Home"
@using MudBlazor
@using Shared.Classes
@inject HttpClient httpClient
@inject StatoApp StatoApp 
@inject ISnackbar Snackbar
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudTable  Style="background-color : #fefefe" Items="@Classi" Hover="true" ReadOnly="false" Filter="new Func<Classe,bool>(FilterFunc)" SortLabel="Sort By" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Classi</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Cerca" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Classe, object>(x=>x.Anno)">Anno</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Classe, object>(x=>x.Sezione)">Sezione</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Classe, object>(x=>x.Indirizzo)">Indirizzo</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Anno">@context.Anno</MudTd>
        <MudTd DataLabel="Sezione">@context.Sezione</MudTd>
        <MudTd DataLabel="Indirizzo">@context.Indirizzo</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {5,10,15,20,int.MaxValue}"/>
    </PagerContent>
</MudTable>
<div class="d-flex flex-wrap mt-4">
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-start">Classe selezionata : @selectedItem1?.ToString()</MudText>
    </div>
</div>
@code {
    private string searchString = "";
    private Classe selectedItem1 = null;
    private HashSet<Classe> selectedItems = new HashSet<Classe>();
    private IEnumerable<Classe> Classi;

    protected override async Task OnInitializedAsync()
    {
        //Classi = await httpClient.GetFromJsonAsync<List<Classe>>("/api/Classi/GetClassi?sk=");
        Classi = new List<Classe> { new Classe(1, 1, 'A', "Informatica"), new Classe(2, 2, 'B', "Informatica"), new Classe(3, 4, 'A', "Informatica"), new Classe(4, 5, 'F', "Chimica"), new Classe(5, 3, 'F', "Chimica"), new Classe(6, 1, 'O', "Turismo"), new Classe(7, 2, 'I', "Classico"), new Classe(8, 1, 'I', "Classico"), new Classe(9, 1, 'L', "Linguistico"), new Classe(10, 5, 'L', "Linguistico"),new Classe(11, 1, 'D', "Alberghiero") };
    }

    private bool FilterFunc(Classe classePassata)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (classePassata.Anno.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (classePassata.Sezione.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (classePassata.Indirizzo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}