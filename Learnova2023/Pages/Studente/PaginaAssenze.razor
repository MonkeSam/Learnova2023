@page "/Studente/PaginaAssenze"
@using Shared.Classes
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using Shared.Classes;
@inject StatoApp StatoApp
@inject HttpClient Http
@inject IJSRuntime JSr
<RadzenContextMenu />
<RadzenTooltip />


<RadzenScheduler Style="height : 100%" @ref="scheduler" LoadData=@LoadAssenze SlotRender="@OnSlotRender" Data="@Frequenza" TItem="DataItem" StartProperty="Periodo" EndProperty="Periodo" TextProperty="Text">
    <RadzenYearView />
</RadzenScheduler>

<style>
    .rz-scheduler-nav-views .rz-button.rz-primary.rz-state-active {
        color: @Colors.Orange.Darken3 !important;
        background-color: @Colors.Amber.Lighten4 !important
    }
</style>

@code {
    public class DataItem
    {
        public DateTime Periodo { get; set; }
        public string Text { get; set; }
    }
    private int Count = 0;
    public RadzenScheduler<DataItem> scheduler;
    List<DataItem> AssenzeStud = new List<DataItem>()
    {
        new DataItem{Periodo = new DateTime(2023, 5, 1, 8, 30, 52), Text="Assente" },
        new DataItem{Periodo = new DateTime(2023, 5, 2, 8, 30, 52), Text="Assente" },
        new DataItem{Periodo = new DateTime(2023, 5, 19, 8, 30, 52), Text="Assente" },
        new DataItem{Periodo = new DateTime(2022, 11, 11, 8, 30, 52), Text="Assente" },
        new DataItem{Periodo = new DateTime(2022, 11, 12, 8, 30, 52), Text="Assente" },
        new DataItem{Periodo = new DateTime(2022, 12, 22, 8, 30, 52), Text="Assente" },
        new DataItem{Periodo = new DateTime(2023, 4, 23, 8, 30, 52), Text="Assente" }
    };
    List<DataItem> Frequenza = new List<DataItem>();
    List<SchedulerSlotRenderEventArgs> SlotRen = new List<SchedulerSlotRenderEventArgs>();


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        SlotRen.Add(args);
        args.Attributes["data-Id"] = Count;
        Count++;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        for (int i = 0; i < SlotRen.Count; i++)
        {
            JSr.InvokeVoidAsync("ChangeSlotColor", i, (AssenzeStud.Count(x => SlotRen[i].Start.Equals(x.Periodo.Date)) > 0));
        }
        SlotRen.Clear();
        Count = 0;
    }

    protected override void OnInitialized()
    {
        DateTime help = new DateTime(2022, 9, 15, 8, 30, 52);
        for(int i=0;help.Date < DateTime.Now.Date;i++)
        {
            if(help.DayOfWeek!=0)
            {
                Frequenza.Add(new DataItem { Periodo = help, Text = "" });
            }
            help = help.AddDays(1);
        }
    }

    public async Task LoadAssenze(SchedulerLoadDataEventArgs args)
    {

        //string api = $"/api/Assenze/GetAssenze?idStudente={StatoApp.Details.Id}&sk={StatoApp.SessionString}";
        //AssenzeStud = await Http.GetAsyncFromJson<DateTime>()
    }

}
