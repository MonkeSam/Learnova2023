
@using Shared.Classes

<MudDialog Class=" justify-content-center align-items-center mx-auto my-auto">

    <DialogContent>
        <MudCard Class="w-100 h-100">
            <EditForm Model="@Compito" >
                <DataAnnotationsValidator />
                                                 
                <MudCardContent Style="overflow-y:scroll">
                    
                    
                    <MudGrid>
                        <MudItem xs="6" >   
                            <MudTextField Label="Professore" AdornmentText="" Variant="MudBlazor.Variant.Outlined" T="string" ReadOnly=true Text=@tmp.Professore.ToString()></MudTextField>
                            <MudSelect Label="Materia" Variant="MudBlazor.Variant.Filled" T="string" ReadOnly=Readonly @bind-Value=@tmp.Materia>
                                @foreach(string mat in ListaMaterie)
                                {
                                    <MudSelectItem T=string Value=@mat>@mat</MudSelectItem>
                                }
                            </MudSelect>
                                
                        </MudItem>

          
                        <MudItem xs="6" >
                            <MudSelect Label="Tipo" Variant="MudBlazor.Variant.Filled" T="string" @bind-Value=@tmp.Tipo ReadOnly=Readonly>
                                @foreach (string tip in TipiCompiti)
                                {
                                    <MudSelectItem T=string Value=@tip>@tip</MudSelectItem>
                                }
                            </MudSelect>
                            
                            <MudDatePicker Label="Data" Variant="MudBlazor.Variant.Filled" T="string" ReadOnly=Readonly Date=@tmp.Date DateChanged="DataSpostata"></MudDatePicker>      
                        </MudItem>
                        <MudItem >
                                
                        </MudItem >
                        <MudItem xs="12">
                            <MudTextField Label="Descrizione" Lines="5" Variant="MudBlazor.Variant.Filled" T="string" ReadOnly=Readonly @bind-Text=@tmp.Descrizione></MudTextField>
                        </MudItem>
                            
                    </MudGrid>
                        
                </MudCardContent>
            </EditForm>
            
        </MudCard>
        
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (stato.Details.GetType() == typeof(Professore))
        {
            <MudButton Color="Color.Success" Variant="MudBlazor.Variant.Filled" OnClick="Submit">Yes</MudButton>
        }
        
        
    </DialogActions>
</MudDialog>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public StatoApp stato { get; set; }

    [Parameter]
    public Compito Compito { get; set; }

    public Compito tmp { get; set; }

    private List<string> ListaMaterie = new List<string> { "Tpsit", "Sistemi e Reti", "Storia", "Informatica", "Matematica" };
    private string[] TipiCompiti = new string[2]{"Verifica","Interrogazione"};
    public bool Readonly=true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        tmp = Compito;
        if(Compito.Professore != null)
        {
            if (stato.Details.GetType() == typeof(Professore) && (stato.Details.Equals(Compito.Professore) == true))
            {
                Readonly = false;
            }
        }
        else
        {
            tmp.Professore = stato.Details;
            Readonly = false;
        }

    }
    void DataSpostata(DateTime? dataScelta)
    {
        tmp.Date = dataScelta;
    }
    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    void Cancel() => MudDialog.Cancel();
}
